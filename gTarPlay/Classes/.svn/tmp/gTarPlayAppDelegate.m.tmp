//
//  gTarPlayAppDelegate.m
//  gTarPlay
//
//  Created by Marty Greenia on 3/8/11.
//  Copyright 2011 Msft. All rights reserved.
//

#import "gTarPlayAppDelegate.h"

#import <TargetConditionals.h>

#import "SongViewController.h"
#import "SongPlayerViewController.h"
#import "RootViewController.h"

#import "CloudController.h"
#import "FileController.h"
#import "GuitarController.h"
#import "UserController.h"
#import "AudioController.h"
//#import "ContentController.h"

SongViewController * g_songViewController;
RootViewController * g_rootViewController;
SongPlayerViewController * g_songPlayerViewController;
Facebook * g_facebook;

CloudController * g_cloudController;
AudioController * g_audioController;
FileController * g_fileController;
GuitarController * g_guitarController;
UserController * g_userController;
//ContentController * g_contentController;

@implementation gTarPlayAppDelegate

@synthesize window;
@synthesize navigationController;

#pragma mark -
#pragma mark Application lifecycle

- (id)init
{
    self = [super init];
    
    if ( self )
    {
                
        //
        // Load the global controllers
        //
        
        //
        // Init the cloud controller
        //
        
        //	g_cloudController = [[CloudController alloc] init];
        g_cloudController = [[CloudController alloc] initWithServer:@"http://50.18.250.24/v0.08"];
//        g_cloudController = [[CloudController alloc] initWithServer:@"http://mcbookpro.local:8888"];
//        g_cloudController = [[CloudController alloc] initWithServer:@"http://www.strumhub.com/v0.53"];
        
        //
        // Restore the file controller so we can get all the cached content
        //
        g_fileController = [[FileController alloc] initWithCloudController:g_cloudController];
        
        //
        // Create the content controller 
        //
//        g_contentController = [[ContentController alloc] initWithCloudController:g_cloudController];
        
        //
        // Connect to the gtar device
        //
        g_guitarController = [[GuitarController alloc] init];
        
        // Create the audio controller
        g_audioController = [[AudioController alloc] initWithAudioSource:SamplerSource AndInstrument:nil];
        [g_audioController initializeAUGraph];
        
#if TARGET_IPHONE_SIMULATOR
//        [g_guitarController debugSpoofConnected];
        
//        [NSTimer scheduledTimerWithTimeInterval:5.0f target:g_guitarController selector:@selector(debugSpoofConnected) userInfo:nil repeats:nil];
//        [NSTimer scheduledTimerWithTimeInterval:9.0f target:g_guitarController selector:@selector(debugSpoofDisconnected) userInfo:nil repeats:nil];
#endif
        
        //
        // Create the user controller to manage users
        //
        g_userController = [[UserController alloc] initWithCloudController:g_cloudController];
        
    }
    
    return self;
    
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{    
    
    // Override point for customization after application launch.
	navigationController.navigationBarHidden = YES;
    
    // Add the navigation controller's view to the window and display.
    [self.window addSubview:navigationController.view];
    [self.window makeKeyAndVisible];

    // We never want to rotate
    [[UIDevice currentDevice] endGeneratingDeviceOrientationNotifications];
    
    return YES;
}


- (void)applicationWillResignActive:(UIApplication *)application
{
    /*
     Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
     Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
     */
    
    // if there is a currently running song player instance, pause that.
    if ( g_songViewController != nil )
    {
        [g_songViewController pauseSong];
    }
    
    // if they are listening to a song, pause that.
    if ( g_songPlayerViewController != nil )
    {
        [g_songPlayerViewController pauseSongPlayback];
    }
    
}


- (void)applicationDidEnterBackground:(UIApplication *)application
{
    /*
     Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
     If your application supports background execution, called instead of applicationWillTerminate: when the user quits.
     */
}


- (void)applicationWillEnterForeground:(UIApplication *)application
{
    /*
     Called as part of  transition from the background to the inactive state: here you can undo many of the changes made on entering the background.
     */
    
}


- (void)applicationDidBecomeActive:(UIApplication *)application
{
    /*
     Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
     */
    
    // Clear the cache if this changes in the background
    [self checkAndClearCache];
    
    if ( g_rootViewController.m_waitingForFacebook == YES )
    {
        [g_rootViewController displayWelcomeDialog];
    }
    
    [g_facebook extendAccessTokenIfNeeded];

}


- (void)applicationWillTerminate:(UIApplication *)application
{
    /*
     Called when the application is about to terminate.
     See also applicationDidEnterBackground:.
     */
}

// For handling facebook URLs
- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation
{
    return [g_facebook handleOpenURL:url]; 
}

#pragma mark -
#pragma mark Globals

- (void)checkAndClearCache
{
    
    if ( g_fileController == nil )
    {
        return;
    }
    
    // Clear the cache if this changes in the background
    NSUserDefaults * settings = [NSUserDefaults standardUserDefaults];

    [settings synchronize];
    
    BOOL clearCache = [settings boolForKey:@"ClearCache"];
    BOOL runBefore = [settings boolForKey:@"RunBefore"];
    
    if ( clearCache == YES )
    {
        // Clear the cache and then re-install the preloaded content
        [g_fileController clearCache];
        [g_userController clearCache];
        [g_facebook logout];
        
        [settings setBool:NO forKey:@"ClearCache"];
        
        [settings synchronize];
        
//        [self installPreloadedContent];
        
    }
    else if ( runBefore == NO )
    {
        // If this is the first time we run, preinstall the content
//        [self installPreloadedContent];
    }
    
}

- (void)installPreloadedContent
{
    
    // 'install' the preloaded content into the FileController
    NSString * plistName = [[NSBundle mainBundle] pathForResource:@"preloaded-content" ofType:@"plist"];
    NSDictionary * preloadedContentDict = [NSDictionary dictionaryWithContentsOfFile:plistName];
    NSArray * preloadedContentArray = [preloadedContentDict objectForKey:@"PreloadedContent"];
    
    for ( NSString * fileName in preloadedContentArray )
    {
        
        NSString * filePath = [[NSBundle mainBundle] pathForResource:[fileName stringByDeletingPathExtension] ofType:[fileName pathExtension]];
        
        NSLog(@"Installing %@", filePath);
        
        // this gets us the file id
        NSString * fileIdStr = [[fileName lastPathComponent] stringByDeletingPathExtension];
        
        BOOL result = [g_fileController saveFilePath:filePath withFileId:[fileIdStr integerValue]];
        
        if ( result == NO )
        {
            NSLog(@"Failed to install fileid %@ %@", fileIdStr, filePath);
        }
    }
}

#pragma mark -
#pragma mark Memory management

- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application
{
    /*
     Free up as much memory as possible by purging cached data objects that can be recreated (or reloaded from disk) later.
     */
}


- (void)dealloc
{
    
    [g_userController release];
    
    [g_guitarController release];
    
//    [g_contentController release];
    
    [g_fileController release];
    
    [g_cloudController release];
    
	[navigationController release];
    
	[window release];
    
	[super dealloc];
}

@end

